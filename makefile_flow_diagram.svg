<?xml version="1.0" encoding="UTF-8"?>
<svg width="1600" height="1200" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; }
      .file { font-family: Arial, sans-serif; font-size: 12px; fill: #333; }
      .param { font-family: Arial, sans-serif; font-size: 10px; fill: #666; }
      .action { font-family: Arial, sans-serif; font-size: 11px; fill: #444; }
      .main-work { font-family: Arial, sans-serif; font-size: 11px; fill: #dc3545; font-weight: bold; }
      .arrow { stroke: #333; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .param-arrow { stroke: #0066cc; stroke-width: 1.5; fill: none; marker-end: url(#bluearrowhead); }
      .work-highlight { stroke: #dc3545; stroke-width: 3; fill: none; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#333" />
    </marker>
    <marker id="bluearrowhead" markerWidth="8" markerHeight="6" refX="7" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#0066cc" />
    </marker>
  </defs>
  
  <!-- 标题 -->
  <text x="800" y="30" text-anchor="middle" class="title" fill="#2c3e50">
    Make ARCH=riscv32e-npc ALL=dummy run 详细调用流程图 (红色=主要工作)
  </text>
  
  <!-- 1. CPU-TESTS MAKEFILE -->
  <rect x="50" y="60" width="280" height="120" fill="#cce5ff" stroke="#0066cc" stroke-width="2" rx="5"/>
  <text x="190" y="80" text-anchor="middle" class="file">am-kernels/tests/cpu-tests/Makefile</text>
  <text x="190" y="95" text-anchor="middle" class="action">接收: ARCH=riscv32e-npc ALL=dummy run</text>
  <!-- 红色主要工作 -->
  <rect x="60" y="105" width="260" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="190" y="120" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="190" y="135" text-anchor="middle" class="main-work">• 解析 ALL=dummy，找到 tests/dummy.c</text>
  <text x="190" y="150" text-anchor="middle" class="main-work">• 动态生成 Makefile.dummy</text>
  <text x="190" y="165" text-anchor="middle" class="main-work">• 调用 AM 构建系统</text>
  
  <!-- 2. 临时MAKEFILE -->
  <rect x="380" y="60" width="250" height="120" fill="#ffe0b3" stroke="#ff9900" stroke-width="2" rx="5"/>
  <text x="505" y="80" text-anchor="middle" class="file">Makefile.dummy (动态生成)</text>
  <text x="505" y="95" text-anchor="middle" class="action">内容: NAME=dummy SRCS=tests/dummy.c</text>
  <!-- 红色主要工作 -->
  <rect x="390" y="105" width="230" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="505" y="120" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="505" y="135" text-anchor="middle" class="main-work">• 定义项目名称和源文件</text>
  <text x="505" y="150" text-anchor="middle" class="main-work">• include ${AM_HOME}/Makefile</text>
  <text x="505" y="165" text-anchor="middle" class="main-work">• 桥接用户程序到AM系统</text>
  
  <!-- 箭头1 -->
  <line x1="330" y1="120" x2="380" y2="120" class="arrow"/>
  <text x="325" y="115" class="param">生成临时文件</text>
  
  <!-- 3. AM主MAKEFILE -->
  <rect x="680" y="60" width="280" height="120" fill="#ccffcc" stroke="#009900" stroke-width="2" rx="5"/>
  <text x="820" y="80" text-anchor="middle" class="file">abstract-machine/Makefile</text>
  <text x="820" y="95" text-anchor="middle" class="action">AM构建系统核心</text>
  <!-- 红色主要工作 -->
  <rect x="690" y="105" width="260" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="820" y="120" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="820" y="135" text-anchor="middle" class="main-work">• 包含架构配置 scripts/$(ARCH).mk</text>
  <text x="820" y="150" text-anchor="middle" class="main-work">• 统一编译链接流程</text>
  <text x="820" y="165" text-anchor="middle" class="main-work">• 生成最终镜像文件</text>
  
  <!-- 箭头2 -->
  <line x1="630" y1="120" x2="680" y2="120" class="arrow"/>
  <text x="630" y="115" class="param">include调用</text>
  
  <!-- 4. 架构配置链 -->
  <rect x="100" y="220" width="220" height="100" fill="#e6ccff" stroke="#8000ff" stroke-width="2" rx="5"/>
  <text x="210" y="240" text-anchor="middle" class="file">scripts/riscv32e-npc.mk</text>
  <!-- 红色主要工作 -->
  <rect x="110" y="250" width="200" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="210" y="265" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="210" y="280" text-anchor="middle" class="main-work">• include riscv.mk + npc.mk</text>
  <text x="210" y="295" text-anchor="middle" class="main-work">• 设置 -march=rv32e_zicsr</text>
  <text x="210" y="310" text-anchor="middle" class="main-work">• 添加libgcc支持源文件</text>

  <rect x="360" y="220" width="200" height="100" fill="#e6ccff" stroke="#8000ff" stroke-width="2" rx="5"/>
  <text x="460" y="240" text-anchor="middle" class="file">scripts/isa/riscv.mk</text>
  <!-- 红色主要工作 -->
  <rect x="370" y="250" width="180" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="460" y="265" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="460" y="280" text-anchor="middle" class="main-work">• 设置RISC-V工具链</text>
  <text x="460" y="295" text-anchor="middle" class="main-work">• CROSS_COMPILE前缀</text>
  <text x="460" y="310" text-anchor="middle" class="main-work">• ISA相关编译选项</text>

  <rect x="600" y="220" width="220" height="100" fill="#e6ccff" stroke="#8000ff" stroke-width="2" rx="5"/>
  <text x="710" y="240" text-anchor="middle" class="file">scripts/platform/npc.mk</text>
  <!-- 红色主要工作 -->
  <rect x="610" y="250" width="200" height="60" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="710" y="265" text-anchor="middle" class="main-work">🔴 主要工作:</text>
  <text x="710" y="280" text-anchor="middle" class="main-work">• 定义AM_SRCS运行时源文件</text>
  <text x="710" y="295" text-anchor="middle" class="main-work">• 设置链接器选项和内存布局</text>
  <text x="710" y="310" text-anchor="middle" class="main-work">• 定义NPC执行流程</text>

  <!-- 架构配置箭头 -->
  <line x1="820" y1="180" x2="210" y2="220" class="param-arrow"/>
  <line x1="320" y1="270" x2="360" y2="270" class="param-arrow"/>
  <line x1="560" y1="270" x2="600" y2="270" class="param-arrow"/>
  <text x="515" y="210" class="param">配置链调用</text>
  
  <!-- 5. 源文件组 -->
  <g id="sources">
    <!-- 用户程序 -->
    <rect x="50" y="360" width="150" height="120" fill="#ffcccc" stroke="#cc0000" stroke-width="2" rx="5"/>
    <text x="125" y="380" text-anchor="middle" class="file">tests/dummy.c</text>
    <!-- 红色主要工作 -->
    <rect x="60" y="390" width="130" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
    <text x="125" y="405" text-anchor="middle" class="main-work">🔴 内容:</text>
    <text x="125" y="420" text-anchor="middle" class="main-work">• main()函数</text>
    <text x="125" y="435" text-anchor="middle" class="main-work">• 用户业务逻辑</text>
    <text x="125" y="450" text-anchor="middle" class="main-work">• 调用AM API</text>
    <text x="125" y="465" text-anchor="middle" class="main-work">• 程序入口点</text>
    
    <!-- AM运行时 -->
    <rect x="230" y="360" width="180" height="120" fill="#b3d9ff" stroke="#0066cc" stroke-width="2" rx="5"/>
    <text x="320" y="380" text-anchor="middle" class="file">am/src/riscv/npc/*</text>
    <!-- 红色主要工作 -->
    <rect x="240" y="390" width="160" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
    <text x="320" y="405" text-anchor="middle" class="main-work">🔴 运行时核心:</text>
    <text x="320" y="420" text-anchor="middle" class="main-work">• start.S: _start入口</text>
    <text x="320" y="435" text-anchor="middle" class="main-work">• trm.c: 程序终止管理</text>
    <text x="320" y="450" text-anchor="middle" class="main-work">• cte.c: 上下文切换</text>
    <text x="320" y="465" text-anchor="middle" class="main-work">• trap.S: 异常处理</text>
    
    <!-- 标准库 -->
    <rect x="440" y="360" width="150" height="120" fill="#b3ffb3" stroke="#009900" stroke-width="2" rx="5"/>
    <text x="515" y="380" text-anchor="middle" class="file">klib/src/*</text>
    <!-- 红色主要工作 -->
    <rect x="450" y="390" width="130" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
    <text x="515" y="405" text-anchor="middle" class="main-work">🔴 标准库:</text>
    <text x="515" y="420" text-anchor="middle" class="main-work">• stdio.c: printf等</text>
    <text x="515" y="435" text-anchor="middle" class="main-work">• stdlib.c: malloc等</text>
    <text x="515" y="450" text-anchor="middle" class="main-work">• string.c: strcpy等</text>
    <text x="515" y="465" text-anchor="middle" class="main-work">• 系统调用封装</text>
  </g>
  
  <!-- 从npc.mk到源文件的箭头 -->
  <line x1="710" y1="320" x2="320" y2="360" class="param-arrow"/>
  <text x="515" y="350" class="param">AM_SRCS指定源文件</text>
  
  <!-- 6. 链接器脚本 -->
  <rect x="620" y="360" width="200" height="120" fill="#ffff99" stroke="#cccc00" stroke-width="2" rx="5"/>
  <text x="720" y="380" text-anchor="middle" class="file">scripts/linker.ld</text>
  <!-- 红色主要工作 -->
  <rect x="630" y="390" width="180" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="720" y="405" text-anchor="middle" class="main-work">🔴 内存布局:</text>
  <text x="720" y="420" text-anchor="middle" class="main-work">• _pmem_start=0x80000000</text>
  <text x="720" y="435" text-anchor="middle" class="main-work">• .text.entry最先(start.S)</text>
  <text x="720" y="450" text-anchor="middle" class="main-work">• 定义程序内存段</text>
  <text x="720" y="465" text-anchor="middle" class="main-work">• 符号地址分配</text>
  
  
  <!-- 7. 生成的镜像文件 -->
  <rect x="300" y="520" width="280" height="120" fill="#ccf0ff" stroke="#0099cc" stroke-width="2" rx="5"/>
  <text x="440" y="540" text-anchor="middle" class="file">dummy.elf / dummy.bin</text>
  <!-- 红色主要工作 -->
  <rect x="310" y="550" width="260" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="440" y="565" text-anchor="middle" class="main-work">🔴 链接生成过程:</text>
  <text x="440" y="580" text-anchor="middle" class="main-work">• GCC链接所有.o文件</text>
  <text x="440" y="595" text-anchor="middle" class="main-work">• 按linker.ld布局内存</text>
  <text x="440" y="610" text-anchor="middle" class="main-work">• objcopy生成.bin镜像</text>
  <text x="440" y="625" text-anchor="middle" class="main-work">• objdump生成反汇编.txt</text>

    <!-- 链接箭头 -->
  <line x1="125" y1="480" x2="350" y2="520" class="arrow"/>
  <line x1="320" y1="480" x2="420" y2="520" class="arrow"/>
  <line x1="515" y1="480" x2="460" y2="520" class="arrow"/>
  <line x1="720" y1="480" x2="500" y2="520" class="arrow"/>
  <text x="400" y="500" class="param">链接所有组件</text>

  <!-- 8. NPC构建 (独立过程) -->
  <rect x="850" y="360" width="280" height="160" fill="#ffccff" stroke="#cc00cc" stroke-width="2" rx="5"/>
  <text x="990" y="380" text-anchor="middle" class="file">npc/Makefile</text>
  <text x="990" y="395" text-anchor="middle" class="action">独立构建NPC模拟器</text>
  <!-- 红色主要工作 -->
  <rect x="860" y="405" width="260" height="100" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="990" y="420" text-anchor="middle" class="main-work">🔴 NPC构建工作:</text>
  <text x="990" y="435" text-anchor="middle" class="main-work">• Verilator编译Verilog→C++</text>
  <text x="990" y="450" text-anchor="middle" class="main-work">• 链接DPI-C接口代码</text>
  <text x="990" y="465" text-anchor="middle" class="main-work">• 生成硬件仿真器可执行文件</text>
  <text x="990" y="480" text-anchor="middle" class="main-work">• 包含difftest、trace等功能</text>
  <text x="990" y="495" text-anchor="middle" class="main-work">• 输出: ysyx_xxx_computer</text>

  <!-- 9. NEMU-SO构建 -->
  <rect x="1180" y="360" width="220" height="120" fill="#d9ccff" stroke="#6600cc" stroke-width="2" rx="5"/>
  <text x="1290" y="380" text-anchor="middle" class="file">nemu/Makefile</text>
  <!-- 红色主要工作 -->
  <rect x="1190" y="390" width="200" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="1290" y="405" text-anchor="middle" class="main-work">🔴 NEMU工作:</text>
  <text x="1290" y="420" text-anchor="middle" class="main-work">• 构建NEMU模拟器</text>
  <text x="1290" y="435" text-anchor="middle" class="main-work">• 编译为动态库.so</text>
  <text x="1290" y="450" text-anchor="middle" class="main-work">• 作为difftest参考</text>
  <text x="1290" y="465" text-anchor="middle" class="main-work">• Golden model</text>

  <!-- 8. NPC构建 (独立过程) -->
  <rect x="850" y="360" width="280" height="160" fill="#ffe8f8" stroke="#e91e63" stroke-width="2" rx="5"/>
  <text x="990" y="380" text-anchor="middle" class="file">npc/Makefile</text>
  <text x="990" y="395" text-anchor="middle" class="action">独立构建NPC模拟器</text>
  <!-- 红色主要工作 -->
  <rect x="860" y="405" width="260" height="100" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="990" y="420" text-anchor="middle" class="main-work">🔴 NPC构建工作:</text>
  <text x="990" y="435" text-anchor="middle" class="main-work">• Verilator编译Verilog→C++</text>
  <text x="990" y="450" text-anchor="middle" class="main-work">• 链接DPI-C接口代码</text>
  <text x="990" y="465" text-anchor="middle" class="main-work">• 生成硬件仿真器可执行文件</text>
  <text x="990" y="480" text-anchor="middle" class="main-work">• 包含difftest、trace等功能</text>
  <text x="990" y="495" text-anchor="middle" class="main-work">• 输出: ysyx_xxx_computer</text>

  <!-- 9. NEMU-SO构建 -->
  <rect x="1180" y="360" width="220" height="120" fill="#f8f0ff" stroke="#9b59b6" stroke-width="2" rx="5"/>
  <text x="1290" y="380" text-anchor="middle" class="file">nemu/Makefile</text>
  <!-- 红色主要工作 -->
  <rect x="1190" y="390" width="200" height="80" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="1290" y="405" text-anchor="middle" class="main-work">🔴 NEMU工作:</text>
  <text x="1290" y="420" text-anchor="middle" class="main-work">• 构建NEMU模拟器</text>
  <text x="1290" y="435" text-anchor="middle" class="main-work">• 编译为动态库.so</text>
  <text x="1290" y="450" text-anchor="middle" class="main-work">• 作为difftest参考</text>
    <text x="1290" y="465" text-anchor="middle" class="main-work">• Golden model</text>

  <!-- 11. 执行流程说明 -->

  <!-- 10. 最终执行阶段 -->
  <rect x="600" y="680" width="400" height="140" fill="#e8ffe8" stroke="#16a085" stroke-width="2" rx="5"/>
  <text x="800" y="700" text-anchor="middle" class="file">NPC最终执行命令组装</text>
  <!-- 红色主要工作 -->
  <rect x="610" y="710" width="380" height="100" fill="#ffe6e6" stroke="#dc3545" stroke-width="2" rx="3"/>
  <text x="800" y="725" text-anchor="middle" class="main-work">🔴 执行组装过程:</text>
  <text x="800" y="740" text-anchor="middle" class="main-work">• make -C $(NPC_HOME) run</text>
  <text x="800" y="755" text-anchor="middle" class="main-work">• ARGS="-e dummy.elf -d nemu-so"</text>
  <text x="800" y="770" text-anchor="middle" class="main-work">• IMG=dummy.bin</text>
  <text x="800" y="785" text-anchor="middle" class="main-work">• 最终: npc-exec -e elf -d so bin</text>
  <text x="800" y="800" text-anchor="middle" class="main-work">• 硬件仿真开始执行用户程序</text>

  <!-- 参数传递箭头 -->
  <line x1="440" y1="640" x2="650" y2="680" class="param-arrow"/>
  <text x="555" y="660" class="param">dummy.bin镜像</text>
  
  <line x1="990" y1="520" x2="850" y2="680" class="param-arrow"/>
  <text x="930" y="600" class="param">NPC可执行文件</text>
  
  <line x1="1290" y1="480" x2="900" y2="680" class="param-arrow"/>
  <text x="1095" y="580" class="param">NEMU-SO</text>

  <!-- 11. 执行流程说明 -->
  <rect x="50" y="860" width="1500" height="280" fill="#f8f9fa" stroke="#6c757d" stroke-width="1" rx="5"/>
  <text x="800" y="885" text-anchor="middle" class="title">🔴 各Makefile主要工作详细说明</text>
  
  <text x="70" y="910" class="main-work">1. cpu-tests/Makefile: 🔴 解析ALL=dummy找到tests/dummy.c → 生成临时Makefile.dummy → 调用AM构建系统</text>
  <text x="70" y="930" class="main-work">2. Makefile.dummy: 🔴 定义NAME=dummy, SRCS=tests/dummy.c → include AM主Makefile → 桥接用户程序到AM</text>
  <text x="70" y="950" class="main-work">3. abstract-machine/Makefile: 🔴 include $(ARCH).mk配置 → 统一编译链接流程 → 生成最终镜像</text>
  <text x="70" y="970" class="main-work">4. riscv32e-npc.mk: 🔴 include riscv.mk+npc.mk → 设置-march=rv32e_zicsr → 架构配置组合</text>
  <text x="70" y="990" class="main-work">5. riscv.mk: 🔴 设置CROSS_COMPILE=riscv64-linux-gnu- → RISC-V工具链配置 → ISA编译选项</text>
  <text x="70" y="1010" class="main-work">6. npc.mk: 🔴 定义AM_SRCS运行时源文件列表 → 设置LDFLAGS链接选项 → 定义NPC执行流程规则</text>
  <text x="70" y="1030" class="main-work">7. am/Makefile: 🔴 编译AM_SRCS为运行时库 → 提供start.S入口和trm.c终止管理</text>
  <text x="70" y="1050" class="main-work">8. klib/Makefile: 🔴 编译标准库函数(stdio/stdlib/string) → 提供printf/malloc等用户API</text>
  <text x="70" y="1070" class="main-work">9. npc/Makefile: 🔴 Verilator编译Verilog→C++ → 链接DPI-C接口 → 生成硬件仿真器可执行文件</text>
  <text x="70" y="1090" class="main-work">10. nemu/Makefile: 🔴 构建NEMU解释器动态库 → 提供difftest Golden Model → 验证NPC执行正确性</text>
  
  <!-- 数据流向图例 -->
  <g id="legend">
    <rect x="1420" y="60" width="170" height="350" fill="#ffffff" stroke="#333" stroke-width="1" rx="3"/>
    <text x="1505" y="80" text-anchor="middle" class="file">图例说明</text>
    
    <!-- 箭头说明 -->
    <text x="1430" y="100" class="file" font-weight="bold">箭头类型:</text>
    <line x1="1430" y1="110" x2="1460" y2="110" class="arrow"/>
    <text x="1470" y="115" class="param">控制流/调用关系</text>
    <line x1="1430" y1="125" x2="1460" y2="125" class="param-arrow"/>
    <text x="1470" y="130" class="param">参数/配置传递</text>
    
    <!-- 颜色说明 -->
    <text x="1430" y="150" class="file" font-weight="bold">模块类型:</text>
    
    <!-- 红色主要工作区域 -->
    <rect x="1430" y="160" width="20" height="15" fill="#ffe6e6" stroke="#dc3545"/>
    <text x="1460" y="170" class="main-work">🔴 主要工作区域</text>
    
    <!-- 各类Makefile -->
    <rect x="1430" y="180" width="20" height="15" fill="#cce5ff" stroke="#0066cc"/>
    <text x="1460" y="190" class="param">CPU测试Makefile</text>
    
    <rect x="1430" y="200" width="20" height="15" fill="#ffe0b3" stroke="#ff9900"/>
    <text x="1460" y="210" class="param">临时Makefile</text>
    
    <rect x="1430" y="220" width="20" height="15" fill="#ccffcc" stroke="#009900"/>
    <text x="1460" y="230" class="param">AM主Makefile</text>
    
    <rect x="1430" y="240" width="20" height="15" fill="#e6ccff" stroke="#8000ff"/>
    <text x="1460" y="250" class="param">架构配置文件</text>
    
    <!-- 源文件类型 -->
    <rect x="1430" y="260" width="20" height="15" fill="#ffcccc" stroke="#cc0000"/>
    <text x="1460" y="270" class="param">用户源代码</text>
    
    <rect x="1430" y="280" width="20" height="15" fill="#b3d9ff" stroke="#0066cc"/>
    <text x="1460" y="290" class="param">AM运行时</text>
    
    <rect x="1430" y="300" width="20" height="15" fill="#b3ffb3" stroke="#009900"/>
    <text x="1460" y="310" class="param">标准库(klib)</text>
    
    <!-- 其他模块 -->
    <rect x="1430" y="320" width="20" height="15" fill="#ffff99" stroke="#cccc00"/>
    <text x="1460" y="330" class="param">链接器脚本</text>
    
    <rect x="1430" y="340" width="20" height="15" fill="#ccf0ff" stroke="#0099cc"/>
    <text x="1460" y="350" class="param">生成镜像文件</text>
    
    <rect x="1430" y="360" width="20" height="15" fill="#ffccff" stroke="#cc00cc"/>
    <text x="1460" y="370" class="param">NPC构建系统</text>
    
    <rect x="1430" y="380" width="20" height="15" fill="#d9ccff" stroke="#6600cc"/>
    <text x="1460" y="390" class="param">NEMU构建系统</text>
  </g>
</svg>
