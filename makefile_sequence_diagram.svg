<?xml version="1.0" encoding="UTF-8"?>
<svg width="1200" height="1400" xmlns="http://www.w3.org/2000/svg">  <!-- 阶段2分隔线 -->
  <line x1="50" y1="210" x2="1150" y2="210" class="phase-separator"/>
  <text x="950" y="225" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段2: 源码编译与构建（多并行分支）</text><defs>
    <style>
      .title { font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; fill: #2c3e50; }
      .subtitle { font-family: Arial, sans-serif; font-size: 14px; fill: #34495e; }
      .box { fill: #ecf0f1; stroke: #34495e; stroke-width: 2; rx: 5; }
      .process-box { fill: #3498db; stroke: #2980b9; stroke-width: 2; rx: 5; }
      .compile-box { fill: #e74c3c; stroke: #c0392b; stroke-width: 2; rx: 5; }
      .link-box { fill: #f39c12; stroke: #e67e22; stroke-width: 2; rx: 5; }
      .run-box { fill: #27ae60; stroke: #229954; stroke-width: 2; rx: 5; }
      .text { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; dominant-baseline: middle; }
      .text-dark { font-family: Arial, sans-serif; font-size: 12px; fill: #2c3e50; text-anchor: middle; dominant-baseline: middle; }
      .small-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; text-anchor: middle; }
      .small-text-left { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .arrow { stroke: #2c3e50; stroke-width: 1.5; fill: none; marker-end: url(#arrowhead); }
      .dependency-arrow { stroke: #e74c3c; stroke-width: 1.5; fill: none; marker-end: url(#arrowhead-red); stroke-dasharray: 4,3; }
      .critical-dependency { stroke: #8e44ad; stroke-width: 2; fill: none; marker-end: url(#arrowhead-purple); stroke-dasharray: 6,3; }
      .lib-dependency { stroke: #16a085; stroke-width: 1.5; fill: none; marker-end: url(#arrowhead-teal); stroke-dasharray: 2,2; }
      .phase-separator { stroke: #95a5a6; stroke-width: 1; stroke-dasharray: 10,5; }
    </style>
    <marker id="arrowhead" markerWidth="6" markerHeight="4" refX="5" refY="2" orient="auto">
      <polygon points="0 0, 6 2, 0 4" fill="#2c3e50"/>
    </marker>
    <marker id="arrowhead-red" markerWidth="6" markerHeight="4" refX="5" refY="2" orient="auto">
      <polygon points="0 0, 6 2, 0 4" fill="#e74c3c"/>
    </marker>
    <marker id="arrowhead-purple" markerWidth="6" markerHeight="4" refX="5" refY="2" orient="auto">
      <polygon points="0 0, 6 2, 0 4" fill="#8e44ad"/>
    </marker>
    <marker id="arrowhead-teal" markerWidth="6" markerHeight="4" refX="5" refY="2" orient="auto">
      <polygon points="0 0, 6 2, 0 4" fill="#16a085"/>
    </marker>
  </defs>

  <!-- 标题 -->
  <text x="400" y="30" class="title">Makefile 调用时序图：从命令输入到程序执行</text>
  <text x="400" y="50" class="subtitle">make ARCH=riscv32e-npc ALL=dummy run</text>

  <!-- 颜色图例 -->
  <text x="950" y="25" class="small-text-left" style="font-weight: bold;">颜色图例：</text>
  
  <!-- 灰色框 - 一般信息 -->
  <rect x="950" y="30" width="15" height="10" class="box"/>
  <text x="970" y="38" class="small-text-left">一般信息/输入</text>
  
  <!-- 蓝色框 - 处理配置 -->
  <rect x="950" y="45" width="15" height="10" class="process-box"/>
  <text x="970" y="53" class="small-text-left">处理与配置</text>
  
  <!-- 红色框 - 编译 -->
  <rect x="950" y="60" width="15" height="10" class="compile-box"/>
  <text x="970" y="68" class="small-text-left">编译操作</text>
  
  <!-- 橙色框 - 链接 -->
  <rect x="1070" y="30" width="15" height="10" class="link-box"/>
  <text x="1090" y="38" class="small-text-left">链接生成</text>
  
  <!-- 绿色框 - 运行 -->
  <rect x="1070" y="45" width="15" height="10" class="run-box"/>
  <text x="1090" y="53" class="small-text-left">运行执行</text>
  
  <!-- 依赖关系图例 -->
  <text x="950" y="88" class="small-text-left" style="font-weight: bold;">依赖关系：</text>
  <line x1="950" y1="95" x2="970" y2="95" class="dependency-arrow"/>
  <text x="975" y="98" class="small-text-left">编译依赖</text>
  
  <line x1="1050" y1="95" x2="1070" y2="95" class="critical-dependency"/>
  <text x="1075" y="98" class="small-text-left">关键依赖</text>
  
  <line x1="950" y1="105" x2="970" y2="105" class="lib-dependency"/>
  <text x="975" y="108" class="small-text-left">库依赖</text>
  
  <line x1="1050" y1="105" x2="1070" y2="105" class="arrow"/>
  <text x="1075" y="108" class="small-text-left">流程箭头</text>

  <!-- 阶段分隔线和标签 -->
  <!-- 阶段1分隔线 -->
  <line x1="50" y1="110" x2="1150" y2="110" class="phase-separator"/>
  <text x="950" y="125" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段1: Makefile解析与目标分析</text>
  
  <!-- 1. 命令输入 -->
  <rect x="50" y="120" width="200" height="50" class="box"/>
  <text x="150" y="140" class="text-dark">命令输入</text>
  <text x="150" y="155" class="small-text">make ARCH=riscv32e-npc ALL=dummy run</text>

  <!-- 2. CPU测试框架 -->
  <rect x="300" y="120" width="180" height="50" class="process-box"/>
  <text x="390" y="140" class="text">CPU测试框架</text>
  <text x="390" y="155" class="small-text" fill="white">am-kernels/tests/cpu-tests/Makefile</text>

  <!-- 3. 创建Makefile.dummy -->
  <rect x="520" y="120" width="180" height="50" class="process-box"/>
  <text x="610" y="140" class="text">创建测试Makefile</text>
  <text x="610" y="155" class="small-text" fill="white">Makefile.dummy</text>

  <!-- run目标依赖分析框 -->
  <rect x="750" y="120" width="200" height="50" class="process-box"/>
  <text x="850" y="140" class="text">run目标分析</text>
  <text x="850" y="155" class="small-text" fill="white">run → all → Makefile.%</text>

  <!-- 箭头 1->2->3->run分析 -->
  <line x1="250" y1="150" x2="290" y2="150" class="arrow"/>
  <line x1="480" y1="150" x2="510" y2="150" class="arrow"/>
  <line x1="700" y1="150" x2="740" y2="150" class="critical-dependency"/>


  <!-- 4. AM构建系统 -->
  <rect x="50" y="210" width="160" height="50" class="process-box"/>
  <text x="130" y="230" class="text">AM构建系统</text>
  <text x="130" y="245" class="small-text" fill="white">abstract-machine/Makefile</text>

  <!-- 5. 架构配置 -->
  <rect x="250" y="210" width="160" height="50" class="process-box"/>
  <text x="330" y="230" class="text">架构配置</text>
  <text x="330" y="245" class="small-text" fill="white">riscv32e-npc.mk</text>

  <!-- 6. 平台配置 -->
  <rect x="450" y="210" width="160" height="50" class="process-box"/>
  <text x="530" y="230" class="text">平台配置</text>
  <text x="530" y="245" class="small-text" fill="white">npc.mk</text>

  <!-- npc.mk中的run目标 -->
  <rect x="650" y="210" width="160" height="50" class="run-box"/>
  <text x="730" y="230" class="text">npc.mk run目标</text>
  <text x="730" y="245" class="small-text" fill="white">run: image nemu-so</text>

  <!-- 箭头 4->5->6->run目标 -->
  <line x1="210" y1="240" x2="240" y2="240" class="arrow"/>
  <line x1="410" y1="240" x2="440" y2="240" class="arrow"/>
  <line x1="610" y1="240" x2="640" y2="240" class="critical-dependency"/>

  <!-- 依赖箭头从Makefile.dummy到AM构建系统 -->
  <line x1="610" y1="175" x2="610" y2="185" class="arrow"/>
  <line x1="610" y1="185" x2="130" y2="185" class="arrow"/>
  <line x1="130" y1="185" x2="130" y2="200" class="arrow"/>

  <!-- 阶段3分隔线 -->
  <line x1="50" y1="310" x2="1150" y2="310" class="phase-separator"/>
  <text x="950" y="325" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段3: NPC模拟器准备</text>
  
  <!-- image依赖链 -->
  <rect x="50" y="300" width="120" height="45" class="link-box"/>
  <text x="110" y="318" class="text">image目标</text>
  <text x="110" y="332" class="small-text" fill="white">npc.mk</text>

  <rect x="190" y="300" width="120" height="45" class="link-box"/>
  <text x="250" y="318" class="text">$(IMAGE).elf</text>
  <text x="250" y="332" class="small-text" fill="white">AM/Makefile</text>

  <rect x="330" y="300" width="120" height="45" class="compile-box"/>
  <text x="390" y="318" class="text">$(OBJS)</text>
  <text x="390" y="332" class="small-text" fill="white">编译.o文件</text>

  <rect x="470" y="300" width="120" height="45" class="compile-box"/>
  <text x="530" y="318" class="text">$(LIBS)</text>
  <text x="530" y="332" class="small-text" fill="white">am + klib</text>

  <!-- nemu-so依赖 -->
  <rect x="610" y="300" width="120" height="45" class="compile-box"/>
  <text x="670" y="318" class="text">nemu-so</text>
  <text x="670" y="332" class="small-text" fill="white">npc.mk</text>

  <!-- image依赖链箭头 -->
  <line x1="170" y1="322" x2="180" y2="322" class="critical-dependency"/>
  <line x1="310" y1="322" x2="320" y2="322" class="critical-dependency"/>
  <line x1="450" y1="322" x2="460" y2="322" class="critical-dependency"/>

  <!-- 从run目标到image和nemu-so的依赖 -->
  <line x1="730" y1="265" x2="730" y2="275" class="critical-dependency"/>
  <line x1="730" y1="275" x2="110" y2="275" class="critical-dependency"/>
  <line x1="110" y1="275" x2="110" y2="290" class="critical-dependency"/>
  
  <line x1="730" y1="275" x2="670" y2="275" class="critical-dependency"/>
  <line x1="670" y1="275" x2="670" y2="290" class="critical-dependency"/>

    <!-- 阶段4分隔线 -->
  <line x1="50" y1="370" x2="1150" y2="370" class="phase-separator"/>
  <text x="950" y="385" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段4: 依赖库构建</text>

  <!-- 7. 编译测试程序 -->
  <rect x="50" y="380" width="130" height="50" class="compile-box"/>
  <text x="115" y="400" class="text">编译测试程序</text>
  <text x="115" y="415" class="small-text" fill="white">tests/dummy.c → .o</text>

  <!-- 8. 构建AM库 -->
  <rect x="200" y="380" width="130" height="50" class="compile-box"/>
  <text x="265" y="400" class="text">构建AM库</text>
  <text x="265" y="415" class="small-text" fill="white">am/Makefile archive</text>

  <!-- 9. 构建klib库 -->
  <rect x="350" y="380" width="130" height="50" class="compile-box"/>
  <text x="415" y="400" class="text">构建klib库</text>
  <text x="415" y="415" class="small-text" fill="white">klib/Makefile archive</text>

  <!-- 10. 编译NEMU解释器 -->
  <rect x="500" y="380" width="130" height="50" class="compile-box"/>
  <text x="565" y="400" class="text">编译NEMU</text>
  <text x="565" y="415" class="small-text" fill="white">nemu/Makefile</text>

  <!-- 11. NPC模拟器（稍后在阶段6编译） -->
  <rect x="650" y="380" width="130" height="50" class="info-box" style="fill: #ecf0f1; stroke: #95a5a6;"/>
  <text x="715" y="400" class="text" style="fill: #7f8c8d;">NPC模拟器</text>
  <text x="715" y="415" class="small-text" style="fill: #7f8c8d;">（image完成后编译）</text>

  <!-- 库依赖箭头 -->
  <line x1="390" y1="350" x2="390" y2="365" class="lib-dependency"/>
  <line x1="390" y1="365" x2="115" y2="365" class="lib-dependency"/>
  <line x1="115" y1="365" x2="115" y2="370" class="lib-dependency"/>

  <line x1="530" y1="350" x2="530" y2="365" class="lib-dependency"/>
  <line x1="530" y1="365" x2="265" y2="365" class="lib-dependency"/>
  <line x1="265" y1="365" x2="265" y2="370" class="lib-dependency"/>

  <line x1="530" y1="365" x2="415" y2="365" class="lib-dependency"/>
  <line x1="415" y1="365" x2="415" y2="370" class="lib-dependency"/>

  <line x1="670" y1="350" x2="670" y2="365" class="dependency-arrow"/>
  <line x1="670" y1="365" x2="565" y2="365" class="dependency-arrow"/>
  <line x1="565" y1="365" x2="565" y2="370" class="dependency-arrow"/>

  <!-- NPC模拟器编译在image完成后才开始，不是并行 -->
  <!-- 移除错误的并行编译箭头，NPC编译在阶段6才进行 -->

  <!-- 阶段5分隔线 -->
  <line x1="50" y1="460" x2="1150" y2="460" class="phase-separator"/>
  <text x="950" y="475" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段5: 软件链接与镜像生成（完成image目标）</text>

  <!-- 11. 链接ELF文件 -->
  <rect x="100" y="490" width="180" height="50" class="link-box"/>
  <text x="190" y="510" class="text">链接生成ELF</text>
  <text x="190" y="525" class="small-text" fill="white">LD $(LINKAGE)</text>

  <!-- 12. 生成二进制镜像 -->
  <rect x="300" y="490" width="180" height="50" class="link-box"/>
  <text x="390" y="510" class="text">生成二进制镜像</text>
  <text x="390" y="525" class="small-text" fill="white">objcopy → .bin</text>

  <!-- 所有编译产物到链接的依赖（除了NPC） -->
  <line x1="115" y1="435" x2="115" y2="475" class="dependency-arrow"/>
  <line x1="265" y1="435" x2="265" y2="475" class="dependency-arrow"/>
  <line x1="415" y1="435" x2="415" y2="475" class="dependency-arrow"/>
  
  <line x1="115" y1="475" x2="190" y2="475" class="dependency-arrow"/>
  <line x1="265" y1="475" x2="190" y2="475" class="dependency-arrow"/>
  <line x1="415" y1="475" x2="190" y2="475" class="dependency-arrow"/>
  <line x1="190" y1="475" x2="190" y2="480" class="dependency-arrow"/>

  <!-- 链接到镜像 -->
  <line x1="280" y1="520" x2="290" y2="520" class="arrow"/>

  <!-- 阶段6分隔线 -->
  <line x1="50" y1="570" x2="1150" y2="570" class="phase-separator"/>
  <text x="950" y="585" class="small-text-left" style="font-weight: bold; fill: #2c3e50; font-size: 13px;">阶段6: image完成后，进入NPC目录编译并运行</text>

  <!-- 13. 在NPC目录编译和运行 -->
  <rect x="50" y="600" width="250" height="60" class="compile-box"/>
  <text x="175" y="620" class="text">编译NPC模拟器</text>
  <text x="175" y="635" class="small-text" fill="white">$(MAKE) -C $(NPC_HOME)</text>
  <text x="175" y="650" class="small-text" fill="white">verilator → C++ → $(BIN)</text>

  <!-- 14. 运行测试 -->
  <rect x="320" y="600" width="280" height="60" class="run-box"/>
  <text x="460" y="620" class="text">运行测试</text>
  <text x="460" y="635" class="small-text" fill="white">$(BIN) $(ARGS) $(IMG)</text>
  <text x="460" y="650" class="small-text" fill="white">加载image.bin到NPC模拟器</text>

  <!-- 15. 测试结果处理 -->
  <rect x="620" y="600" width="180" height="60" class="run-box"/>
  <text x="710" y="625" class="text">收集测试结果</text>
  <text x="710" y="640" class="small-text" fill="white">PASS/FAIL → .result</text>

  <!-- 关键依赖：image完成后，进入NPC目录 -->
  <line x1="390" y1="545" x2="390" y2="585" class="critical-dependency"/>
  <line x1="390" y1="585" x2="175" y2="585" class="critical-dependency"/>
  <line x1="175" y1="585" x2="175" y2="595" class="critical-dependency"/>

  <!-- NPC编译完成后运行测试 -->
  <line x1="300" y1="630" x2="310" y2="630" class="arrow"/>
  
  <!-- 运行完成后收集结果 -->
  <line x1="600" y1="630" x2="610" y2="630" class="arrow"/>
  
  <!-- 时序说明 -->
  <text x="900" y="620" class="small-text" style="font-weight: bold; fill: #e74c3c;">关键时序:</text>
  <text x="900" y="635" class="small-text" style="fill: #e74c3c;">1. 先完成image目标</text>
  <text x="900" y="650" class="small-text" style="fill: #e74c3c;">2. 然后make -C $(NPC_HOME) run</text>
  <text x="900" y="665" class="small-text" style="fill: #e74c3c;">3. 在NPC目录编译和运行</text>

  <!-- 程序执行流程 -->
  <text x="950" y="700" class="small-text-left" style="font-weight: bold; fill: #7f8c8d; font-size: 11px;">程序执行流程详细</text>

  <!-- 程序执行流程 -->
  <rect x="50" y="720" width="120" height="40" class="box"/>
  <text x="110" y="735" class="text-dark">1. start.S</text>
  <text x="110" y="750" class="small-text">设置栈、清零BSS</text>

  <rect x="190" y="720" width="120" height="40" class="box"/>
  <text x="250" y="735" class="text-dark">2. trm.c</text>
  <text x="250" y="750" class="small-text">_trm_init初始化</text>

  <rect x="330" y="720" width="120" height="40" class="box"/>
  <text x="390" y="735" class="text-dark">3. dummy.c</text>
  <text x="390" y="750" class="small-text">执行测试main</text>

  <rect x="470" y="720" width="120" height="40" class="box"/>
  <text x="530" y="735" class="text-dark">4. 返回结果</text>
  <text x="530" y="750" class="small-text">halt通知结束</text>

  <!-- 执行流程箭头 -->
  <line x1="170" y1="745" x2="180" y2="745" class="arrow"/>
  <line x1="310" y1="745" x2="320" y2="745" class="arrow"/>
  <line x1="450" y1="745" x2="460" y2="745" class="arrow"/>

  <!-- 依赖关系总结 -->
  <rect x="50" y="780" width="1100" height="190" class="box"/>
  <text x="600" y="800" class="subtitle">关键依赖关系链</text>
  
  <text x="80" y="825" class="small-text-left" style="font-weight: bold;">1. 顶层依赖：</text>
  <text x="100" y="840" class="small-text-left">• run(cpu-tests) → all → Makefile.dummy → make -f Makefile.dummy run</text>
  <text x="100" y="855" class="small-text-left">• Makefile.dummy → AM/Makefile → npc.mk → run: image nemu-so</text>
  
  <text x="100" y="875" class="small-text-left" style="font-weight: bold;">2. 串行编译依赖（正确流程）：</text>
  <text x="100" y="890" class="small-text-left">• 步骤1: 先编译image → dummy.c + am库 + klib库 → ELF → 二进制镜像</text>
  <text x="100" y="905" class="small-text-left">• 步骤2: image完成后才在npc目录下执行make run编译NPC模拟器</text>
  <text x="100" y="920" class="small-text-left">• 步骤3: 把image路径作为参数传给NPC运行</text>
  
  <text x="650" y="825" class="small-text-left" style="font-weight: bold;">3. 正确的运行依赖：</text>
  <text x="670" y="840" class="small-text-left">• run目标首先依赖image（软件镜像）</text>
  <text x="670" y="855" class="small-text-left">• image完成后在npc目录执行make run</text>
  <text x="670" y="870" class="small-text-left">• NPC编译是最后一步，不是并行</text>
  
  <text x="650" y="885" class="small-text-left" style="font-weight: bold;">4. .o文件归属和依赖关键点：</text>
  <text x="670" y="900" class="small-text-left">• AM和klib构建时.o文件归自己管理</text>
  <text x="670" y="915" class="small-text-left">• 借用AM的Makefile但各自打包静态库</text>
  <text x="670" y="930" class="small-text-left">• 主路径下obj只有测试程序.o文件</text>
  <text x="670" y="945" class="small-text-left">• 不包含CTE、printf等，只有test部分</text>
  <text x="670" y="960" class="small-text-left">• 最后链接：test.o + am.a + klib.a</text>

  <!-- 三大核心工作总结 - 修正为串行关系 -->
  <rect x="50" y="975" width="300" height="100" class="compile-box"/>
  <text x="200" y="995" class="text">步骤1: 软件编译</text>
  <text x="200" y="1010" class="text">• 测试程序 + AM库 + klib库</text>
  <text x="200" y="1025" class="text">• 链接生成ELF</text>
  <text x="200" y="1040" class="text">• 转换为二进制镜像</text>
  <text x="200" y="1055" class="text">• 生成反汇编文件</text>

  <rect x="370" y="975" width="300" height="100" class="process-box"/>
  <text x="520" y="995" class="text">步骤2: NPC编译</text>
  <text x="520" y="1010" class="text">• 在npc目录执行make run</text>
  <text x="520" y="1025" class="text">• Verilator编译Verilog</text>
  <text x="520" y="1040" class="text">• 编译C++模型</text>
  <text x="520" y="1055" class="text">• 生成可执行模拟器</text>

  <rect x="690" y="975" width="300" height="100" class="run-box"/>
  <text x="840" y="995" class="text">步骤3: 运行测试</text>
  <text x="840" y="1010" class="text">• NPC加载image镜像</text>
  <text x="840" y="1025" class="text">• 执行测试程序</text>
  <text x="840" y="1040" class="text">• 收集测试结果</text>
  <text x="840" y="1055" class="text">• 输出PASS/FAIL</text>

  <!-- 工作流程依赖箭头 - 修正为串行关系 -->
  <line x1="350" y1="1025" x2="370" y2="1025" class="critical-dependency"/>
  <line x1="670" y1="1025" x2="690" y2="1025" class="critical-dependency"/>
  
  <!-- 添加串行指示 -->
  <text x="355" y="1020" class="small-text" style="fill: #e74c3c;">串行</text>
  <text x="675" y="1020" class="small-text" style="fill: #e74c3c;">串行</text>

  <text x="450" y="1105" class="subtitle">正确流程: 先编译软件镜像，再编译NPC模拟器，最后执行测试</text>

  <!-- .o文件归属详细说明图 -->
  <rect x="50" y="1130" width="1100" height="120" style="fill: #f8f9fa; stroke: #34495e; stroke-width: 2;"/>
  <text x="600" y="1150" class="title" style="font-weight: bold; font-size: 16px;">.o文件归属和构建依赖详解</text>
  
  <!-- AM库构建区域 -->
  <rect x="70" y="1160" width="250" height="60" style="fill: #e8f4fd; stroke: #3498db;"/>
  <text x="195" y="1175" class="small-text" style="font-weight: bold;">AM库自己管理的.o文件</text>
  <text x="195" y="1190" class="small-text">start.o, trm.o, ioe.c, timer.o</text>
  <text x="195" y="1205" class="small-text">打包为: am-riscv32e-npc.a</text>
  <text x="195" y="1215" class="small-text">借用AM的Makefile但独立构建</text>
  
  <!-- klib库构建区域 -->
  <rect x="340" y="1160" width="250" height="60" style="fill: #fff2e1; stroke: #f39c12;"/>
  <text x="465" y="1175" class="small-text" style="font-weight: bold;">klib库自己管理的.o文件</text>
  <text x="465" y="1190" class="small-text">stdio.o, string.o, stdlib.o</text>
  <text x="465" y="1205" class="small-text">打包为: klib-riscv32e-npc.a</text>
  <text x="465" y="1215" class="small-text">不包含CTE、IOE等复杂功能</text>
  
  <!-- 主程序构建区域 -->
  <rect x="610" y="1160" width="250" height="60" style="fill: #e8f8f5; stroke: #27ae60;"/>
  <text x="735" y="1175" class="small-text" style="font-weight: bold;">主路径下只有测试程序.o</text>
  <text x="735" y="1190" class="small-text">dummy.o (或其他test程序)</text>
  <text x="735" y="1205" class="small-text">如果程序复杂会有多个.o</text>
  <text x="735" y="1215" class="small-text">但不包含库函数部分</text>
  
  <!-- 最终链接 -->
  <rect x="880" y="1160" width="200" height="60" style="fill: #fdeaea; stroke: #e74c3c;"/>
  <text x="980" y="1175" class="small-text" style="font-weight: bold;">最终链接</text>
  <text x="980" y="1190" class="small-text">test.o + am.a + klib.a</text>
  <text x="980" y="1205" class="small-text">→ 完整的ELF文件</text>
  <text x="980" y="1215" class="small-text">各自.o文件分工明确</text>

</svg>
